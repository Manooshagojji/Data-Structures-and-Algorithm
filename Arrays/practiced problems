1Q-Find scond largest element in array
class Solution {
    public int getSecondLargest(int[] arr) {
        int fstlargest=arr[0];
        for(int i=0;i<arr.length;i++){
            if(arr[i]>fstlargest){
                fstlargest=arr[i];
            }
        }
            int sl=-1;
            for(int i=0;i<arr.length;i++){
                if(arr[i]>sl&&arr[i]<fstlargest){
                    sl=arr[i];
                }
            }
             if (sl == Integer.MIN_VALUE) {
            return -1;
        }

        return sl;     
    }
}
ip-[12,35,1,10,34,1]
op-34
-----------------------------------------------------------------------------
2q-difference of array with different array size
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n1=sc.nextInt();
        int a1[]=new int[n1];
        for(int i=0;i<n1;i++){
            a1[i]=sc.nextInt();
        }
        int n2=sc.nextInt();
        int a2[]=new int[n2];
        for(int i=0;i<n2;i++){
            a2[i]=sc.nextInt();
        }
        differenceOfArray(n1,n2,a1,a2);
}
    public static void differenceOfArray(int n1,int n2,int a1[],int a2[]) {
        int ans[] = new int[n2];
        int i = n1 - 1;
        int j = n2 - 1;
        int k = n2 - 1;
        int borrow = 0;
        while (k >= 0) {
            int diff = a2[j] - borrow;
            if (i >= 0) {
                diff = diff - a1[i];
}
            if (diff >= 0) {
                borrow = 0;
            } else {
                diff += 10;
                borrow = 1;
            }
            ans[k] = diff;
            i--;
            j--;
            k--;

        }
        i = 0;
        for (i = 0; i < n2; i++) {
            if (ans[i] != 0) {
                break;
            }
        }
        for (; i < n2; i++) {
            System.out.println(ans[i]);
        }
    }
}
ip-3
4
2 6 7
1 0 2 0
op-7 5 3
------------------------------------------------------------
3Q-count all palindromic rows
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();
        int n = sc.nextInt();
        int arr[][] = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                arr[i][j] = sc.nextInt();
            }
        }
        System.out.println(countAllPalindromicRows(arr, m, n));
    }
         public static int countAllPalindromicRows(int[][] arr,int m,int n){
                 int count=0;
        for(int i=0;i<m;i++){
            int l=0;
            int r=n-1;
            if(checkPalindrome(arr,i,n)==true){
                count++;

            }

        }
        return count;
    }
    public static boolean checkPalindrome(int arr[][],int row,int col){
        int l=0;
        int r=col-1;
        while(l<r) {
            if (arr[row][l] != arr[row][r]) {
                return false;
            }
            l++;
            r--;
        }
        return true;
    }
}
ip-3
4
1 2 1
4 5 6
7 1 7
op-2
-------------------------------------------------------------------------------------------------

