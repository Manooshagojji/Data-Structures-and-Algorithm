//find factorial 
class Main {
    public static void main(String[] args) {
        int n=5;
        System.out.println(fact(n));
    }
    public static int fact(int n){
        if(n==0)
        return 1;
        int subAns=fact(n-1);
        int ans=subAns*n;
        return ans;
    }
}
op: 120
*******************************************************************************************
//PRINT DECREASING ORDER
class Main {
    public static void main(String[] args) {
        //System.out.println("Try programiz.pro");
        int n=5;
        decreasingOrder(n);
    }
    public static void decreasingOrder(int n){
        if(n==0)
        return;
       System.out.println(n);
       decreasingOrder(n-1);
    }
}
OP:
5
4
3
2
1
------------------------------------------------------------------
//PRINT INCREASING ORDER
class Main {
    public static void main(String[] args) {
        //System.out.println("Try programiz.pro");
        int n=5;
        increasingOrder(n);
    }
    public static void increasingOrder(int n){
        if(n==0)
        return;
        increasingOrder(n-1);
        System.out.println(n);
     
    }
}
op:
1
2
3
4
5
*******************************************************************************
//POWER LINEAR->TC=O(n)
class Main {
    public static void main(String[] args) {
         int base=2;
         int power=5;
        System.out.println(powerLinear(base,power));
    }
    public static int powerLinear(int base,int power){
        if(power==0)
        return 1;
        int subAns=powerLinear(base,power-1);
        int ans=subAns*base;
        return ans;
    }
}
OP=32
optimization code,TC=O(logn)class Main {
    public static void main(String[] args) {
         int base=2;
         int power=5;
        System.out.println(powerLinear(base,power));
    }
    public static int powerLinear(int base,int power){
        if(power==0)
        return 1;
        int subAns=powerLinear(base,power/2);
        int ans=subAns*subAns;
        if(power%2!=0)
         ans*=base;
        return ans;
    }
}
************************************************************************************
//DISPLAY ARRAY
class Main {
    public static void main(String[] args) {
         int arr[]={7,2,4,1,3};
         int n=arr.length;
      displayArray(arr,0,n);
    }
    public static void displayArray(int arr[],int i,int n){
        if(i==n)
        return;
        System.out.println(arr[i]);
        displayArray(arr,i+1,n);
    }
}
OP:
7
2
4
1
3
*************************************************************************************
//FIRSTINDEXDAY(LINEAR SEARCH)
class Main {
    public static void main(String[] args) {
        int arr[]={15,11,40,4,4,9};
        int n=arr.length;
        int tar=4;
        System.out.println(firstIndexDay(arr,tar,0,n));
     }
    public static int firstIndexDay(int arr[],int tar,int i,int n){
        if (i==n){
            return -1;
        }
        if(arr[i]==tar){
            return i;
        }
        else{
            return firstIndexDay(arr,tar,i+1,n);
        }
   }
}
OP=3;
******************************************************************************************
//LASTINDEX
class Main {
    public static void main(String[] args) {
        int arr[]={15,11,40,3,9,40};
        int n=arr.length;
        int tar=40;
        System.out.println(lastIndexDay(arr,tar,n-1,n));
     }
    public static int lastIndexDay(int arr[],int tar,int i,int n){
        if (i==n){
            return -1;
        }
        if(arr[i]==tar){
            return i;
        }
        else{
            return lastIndexDay(arr,tar,i-1,n);
        }
   }
}
OP=5;
**************************************************************************************
//PRINTALLINDICES
import java.util.Arrays;
class Main {
    public static void main(String[] args) {
        int arr[]={15,11,40,4,4,9};
        int n=arr.length;
        int tar=4;
       int[] res= printAllIndices(0,arr,tar,n,0);
       System.out.println(Arrays.toString(res));
     }
    public static int[] printAllIndices(int i,int arr[],int tar,int n,int c){
        if(i==n){
            int[] base=new int[c];
            return base;
        }
        int ans[];
        if(arr[i]==tar){
        ans=printAllIndices(i+1,arr,tar,n,c+1);
        ans[c]=i;
        }
        else{
             ans=printAllIndices(i+1,arr,tar,n,c);
        }
        return ans;
   }
}
OP=[3, 4]
*******************************************************************************************************************
//GETSUBSEQUENCE
class Main {
    public static void main(String[] args) {
        //System.out.println("Try programiz.pro");
        String que="abc";
        getSubSeq(que,"");
    }
    public static void getSubSeq(String que,String ans){
        if(que.length()==0){
            System.out.println(ans);
            return;
        }
        char ch=que.charAt(0);
        String ros=que.substring(1);
        //include character
        getSubSeq(ros,ans+ch);
        //exclude character
        getSubSeq(ros,ans);
    }
}
OP:
abc ab ac a bc b c  
********************************************************************
//GETSTAIRPATHS
class Main {
    public static void main(String[] args) {
        //System.out.println("Try programiz.pro");
        int n=3;
        getStairpaths(n,"");
    }
    public static void getStairpaths(int n,String ans){
        if(n==0){
            System.out.print(ans+" ");
            return;
        }
        if(n<0){
            return;
        }
        getStairpaths(n-1,ans+"1");
        getStairpaths(n-2,ans+"2");
        getStairpaths(n-3,ans+"3");
        
    }
}
OP=111 12 21 3 
****************************************************************************************
//GETMAIZEPATH
class Main {
    public static void main(String[] args) {
        //System.out.println("Try programiz.pro");
        int m=3;
        int n=3;
        getMaizePath(0,0,m-1,n-1,"");
    }
    public static void getMaizePath(int sr,int sc,int dr,int dc,String ans){
    if(sr>dr||sc>dc){
        return;
    }
    if(sr==dr&&sc==dc){
        System.out.print(ans+" ");
    }
    getMaizePath(sr,sc+1,dr,dc,ans+"h");
     getMaizePath(sr+1,sc,dr,dc,ans+"v");
    }
}
OP=hhvv hvhv hvvh vhhv vhvh vvhh 
******************************************************************************************************




